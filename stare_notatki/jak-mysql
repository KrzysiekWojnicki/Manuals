# PLIKI i USTAWIENIA
--------------------
	/etc/mysql/my.cfg
	- plik konfiguracyjny dla mariaDb
	 innoDB - silnik dla Mysql
	 my.ini 
	 - w sekcji binary login jest zaimplementowany log-bin
	 log-bin=nazwa_loga  - w ten sposób uruchamianie tworzenia loga binarnego
mysqlbinlog - program do odczytu logów binarnych
	mysqlbinlog "ścieżka_do_pliku_binlog" - synatx
	set global - ustawienia z mysql działają tylko do zaotrzymania usługi mysql
		dobre do testowania , jednak trzeba zmienić mysql.d alby działałyna stałe
	my.cnf - też zawiera pliki konfig i to co poniżej
	 The MariaDB/MySQL tools read configuration files in the following order:
	 1. "/etc/mysql/mariadb.cnf" (this file) to set global defaults,
	 2. "/etc/mysql/conf.d/*.cnf" to set global options.
	 3. "/etc/mysql/mariadb.conf.d/*.cnf" to set MariaDB-only options.
	 4. "~/.my.cnf" to set user-specific options.

# LOGI
------
	To enable error log add following

		[mysqld_safe]
		log_error=/var/log/mysql/mysql_error.log

		[mysqld]
		log_error=/var/log/mysql/mysql_error.log
	To enable general query log add following

		general_log_file        = /var/log/mysql/mysql.log
		general_log             = 1
	To enable Slow Query Log add following

		log_slow_queries       = /var/log/mysql/mysql-slow.log
		long_query_time = 2
		log-queries-not-using-indexes
		step3: save the file and restart mysql using following commands

		service mysql restart
	To enable logs at runtime, login to mysql client (mysql -u root -p ) and give:

		SET GLOBAL general_log = 'ON';
		SET GLOBAL slow_query_log = 'ON';

# INSTAL 
---------
	apt-get install mysql-server 
		- insalacja dla debian
		można też zainstalować samego kilenta dla logowania się zdalnie do bazy
	mysql_install_db
		- skrypt króry tworzy domyślne foldery , powinien i tak automatycznie
		się wykonać przy pierwszym uruchomienieu mysql-a
	mysql-secure-installation 
		- instalujemy ,przy okazji nadając mu hasło root

	yum install -y mariadb-sercer 
		- instalacja na frdorze
	systemctl status mariadb 
	- sprawdzamy czy jest wystartowny , jak nie to starujemy
	- jak dłuższą chwile (miesiąc) nie bedziemy używać to można wogule disable

# kompozytowy klucz
------------------
	kiedy łączymy 2 kolumny np; w tablicy pośredniczącej składającej się z 2 id
	z różnych tablic . klucz kompozytowy to id z dwóch lub wielu kolumn
	
# ondelete , onupdate
---------------------
	restrict - domyślna opcja , nie pozwoli zmienić wartości pola foren key
		jeśli jego rodzic primery key lub unique zmieni wartoś (onupdate)
		lub zostanie usunięty (ondelete) 
	cascade - ondelete zostanie skaskowany z rodzicem ,onupdate zostanie zmieniony
		z rodzicem
	set null - otrzyma wartość NULL przy zmienie stanu rodzica lub jego usunięciu


# URUCHAMIANIE mysql
--------------------
	mysql -u root -p
		- odpalamy mysql u user p password , podajemy password.. , 
		domyślnie w mysql konto root nie ma hasła , chyba że je ustawiliśmy :)
	-h -host name , domyślnie localhost
	mysql -u kw -p baaaza 
		- po podaniu hasła odrazu zalogujemy się do bazy baaaza
	mysql -e "select * from nauka.pracownicy" -u kw -p
	- zapytamy z wiersza poleceń powłoki , i w niej otrzymamy odp.
	- przekierowując do pliku robimy sobie backup
	mysql -h localhost -u myname -ppassword mydb
	- logowanie z określeniem hosta , domyślnie localhost
	--protocol={TCP|SOCKET|PIPE|MEMORY}
	- a tak możemy zmienić protokół połączenia
		mysql --host=remote.example.com --port=13306

# CHECK
-------
	check table pracownicy ;
	- sprawdzimy czy tabela działa...

# SHOW podgląd
--------------
	show databases ;
	- pokazuje nam liste baz
	show tables;
	- pokazuje tabele (jak są)
	show create table pracownicy;
	- pokarze jak wyglądało polecenie create dla stworzenia tab.pracownicy
	show variables where variable_name like "%dir";
	- pokarze wszystkie miejsca gdzie są zlokalizowne bazy
	- zamisat dir możemy szukać oczywiście innych zmiennych np; server_id
	SHOW [GLOBAL | SESSION] STATUS - pokarze status sesji lub globalnych ustawien
	SHOW STATUS LIKE 'Key%'; - wybierzemy to czego szukamy (jest tego troche)

# USE wybieranie bazy
---------------------
	use "nazwa bazy";
	- operujemy na konkretnej bazie

# DESCRYPTION
-------------
	desc pracownicy;
	- pokazuje tabele pracownicy, z opisami tj. jak jest skąstruowana

# CREATE
--------
	create table "nazwa tabeli"("nazwa pola" "rodzaj zmiennej" "jakieś parametry np.auto_increment" , ..);
	- zwór jak pisć polecenie
	create table pracownicy(id int auto_increment, imie varchar(20),primery key(id));
	- tworzy tabele pracownicy z id i imieniem
	create database "nazwa";
	- tworzy baze
	create table dzial1 as select * from pracownicy where dzial=1;
	- utworzymy tab.dzial1 z tymi wierszami z tab.pracownicy którzy odpowiadaja
	kryterją wyszukania zapytaniem select . tworzymy nową tabele
view - tworzy widok tabeli
	create view dzial2 as select id,imie,nazwisko from pracownicy;
	- stwirzymy widok z warościami z zapytania select.
	Widok jest sposobema na udostępnianie niektórych warotści z tabeli pracownicy
	które jednicześnie edytowne są w widoku i tabeli z jakiej powstał ,
	na tym przykładziem ktoś w tab.dzial2 (widoku) zmieni wartość pola imie
	i też to samo pole w pracownicy ulegnie zmianie. 
		update dzial2 set imie zygmunt where id=1;
index -  przśpiesza zapytania
	create index poZarobkach on pracownicy(zarobki);
	- tworzymy index poZarobkach z kolumy zarobki tab,pracownicy.
	create index po2kolumnach on pracownicy(imie,zarobki);
	- taki index będzie działa sprawnie jeśli w zaptaniu select
	najpierw wybierzemy imie a potem zarobki , kolejność ma znaczenie
fulltext - index typu fulltext
	create fulltext index poOpisie on tabelaZpolemOpisowym(opis);
	- stworzy index fulltext-owy dla kolumny opis w tabeli...
foreign key() references() - tworzenie klucza referencji
	create zamowienia (id int not null auto_increment ,
	klientId int ,  
	produktId int ,
	dataZamowienia datetime default current_timestamp,
	primery key (id)
	foreign key (klientId) references klienci(id),
	foreign key (produktId) references produkty(id),
	- podajemy jakie kolumy będą kluczmi referencyjnymi oraz gdzie będą się odwoływać
	tu odwołują się do kolum id w tab. kienci , i produkty
like - stworzymy nową tabele o strukturze jak jakaś inna
	create table nowa_tabela 
	like nauka.pracownicy;
	- trzeba podać też nazwe bazy z której pochodzi wzorcowa tab.
		skopiujemy tylko struktóre tabeli
regexp - wyrarzenia regularne
	SELECT * FROM employee WHERE emp_name REGEXP "^b";
	- ^ początek stinge , $ - koniec
	- innym jest %
event
function
procedure
trigger


# EXPLAIN
---------
	explain select * from pracownicy\G;
	- w formie kolumnowej (G) pokarze jaką metodą zostało zrealizowane zaptyanie
	np; jeśli mamy indeks którejś z poruszanych kolumn to podejrzymy użycie tegoż

# INSERT
--------
	insert into "nazwa tabeli" valuse(null ,'Jan');
	- dodajemy dane do tabeli
	insert into dni set id=2 , nazwa='czwartek';
	- inny sposób , gdym miał id na auto_incerment to wstawił bym oczywiście null
	insert into dni (nazwa ,id) values ("poniedzialek",3);
	- jeszcze inny sposób , na wstawianie wartość 
	insert into select...
	- załóżmy że stworzyliśmy nową pustą tabele , możemy ją zapełnić danymi
		z zapytania select , np; wybrarliśmy jakieś informacje i chcemy je 
		zarchiwizować w postani statycznej tabeli . taka tabel nie podlega
		dynamiczmym zmianą , od taki jest view.
		!!!--- ważne , nie można wpisywać concat() ani żadnego formatowania ---!!!

# SELECT
--------
SELECT VERSION ();
	- wersja mysql-q
	select * from "nazwa tabeli" ; 
	- pokazuje wszystkie dane z tabieli
 where - klauzula co
       select * from "nazwa tabeli" where imie='Jan' and ... ; 
       - pokazuje wszystkie dane z tabieli gdzie imie = Jan and 
       	inne parametry podgląd pliku konfiguracyjnego
       select host, user, password from mysql.user; 
       - zobaczymy sobie wszystkich urzytkowników i hasła
 sum() - suma
       select sum(zarobki) from pracownicy;
       -sumuje wszystkie pola w kolumnie zarobki , w tabeli pracownicy
max() , min() - maksimum , minimum
	select max(zarobki) from pracownicy;
	- otrzymamy maksymalną warość w kolumnie zarobki 
 avg() - średnia
	select avg(zarobki) from pracownicy;
	- zlicza pola w kolumnie zarobki i wyciąga średnią
count() - zlicza
	select count(1) from pracownicy;
	- zliczy ile jest pól w pierwszej kolumnie w tab. prac..
		można też napisać * albo nazwe pola np; id
	select imie ,nazwisko ,nazwa from pracownicy , dzialy where numer=dzial;
	- wybieranie imienia i nazwisko z jednej tabeli , i nazwy z drugiej tabeli
		numer z dziłu i nawaz z pracownicy musi się zgadzać aby wynik się
		nie powtarzał
	select imie ,count(imie) from pracownicy;
	- podejrzymy jakie są imiona i ile jest każdego rodzaju
having - kiedy argumet posiada podaną watość
	select imie , count(imie) from pracownicy having count(imie) >= 2;
	- pokarze tylko te imiona które powtarzają się 2 lub więcej razy
lcase() , ucase() - małe i wielkie litery
	select ucase(imie) from pracownicy;
	- wybierze tylko imiona zapisane wielką literą
like - wyszukuje wzorca
	select imie from pracownicy where imie like '%r%';
	- wyszuka w kolumnie imie te pola gdzie wystąpi 'r' w dowolnym miejscu
		% - dzika karta ,jak * w bash
between - pomiędzy ,określa przedził wartości
	select * from pracownicy where zarobki between 3000 and 6000;
	- wybierzemy tych którzy zarabiją w podanym przedziale
and - logiczne i , patrz 
	select * from pracownicy where zarobki between 3000 and 6000;
or - logiczne lub
	select * from pracownicy where id=1 or id=3;
	-wybierzemy jedan lub drugi lub oba , jak istnieją
in - zakres wartości
	select * from pracownicy where id in (1,3);
	-wynik ten co przy or
	select max(zarobki) from pracownicy where zarobki not in (select max(zarobki) from pracownicy);
	- wybieramy drugą najwyższą wartość , która NIE W najwyższa watość . NIE JEST RÓWNE
as - alias nazw
	select imie as NAME from pracownicy ;
	- wybierze kolumne imie i wyświetli ją jako NAME
	select a.imie , b.nrZamowienia from pracownicy as a , zamowinia as b;
	- taki myk żeby nie pisać całych nazw tabel przed '.'i tabelą
round() - zaokrąla
	select round(avg(zarobki),2) from pracownicy ;
	- wyświeli średnią z kolumy zarobki zaokrągloną do 2 miejsc po przecinku
formar() - działa jak round , ale formatuje do setki np; 11,000,00 -w przypadku
	format(sum(costam),2)
	concat('$ ',format(sum(costam),2)) -otrzymamy $ 11,000,00
concat - konkatenacja 
	select concat(imie,' ',nazwisko) as ktos from pracownicy;
	- wyświetlimy w jednej kolumnie nazwanej jako 'ktos' dane z dwuch kolumn rozdzielone spacją

field() - określamy pole i podajemy jego wartości
	select * from dni order by field(id ,3,5,1,2,7,4,6); 
	- porządkujemy według pola 'id' w podanej kolejności pul
all - wszystkie
	select * from pracownicy where zarobki>all (select avg(zarobki) from pracownicy where dzial=1);
	- zapytanie zagnieżdżone , porówna do zarobków średniej wszystkich (all) z dziłu 1
any - jakikolwiek
	- jak wyżej ale można jakikolwiek wynik wybrać
count() - liczy wiersze
	select count(1) from pracownicy;
	- policzy ile wierszy ma kolumna 1 w tab. pracownicy
status - pokazuje informacje (status) naszej bazy
	show table status\G;
	-wielkie G zamieni zapisa liniowy na kolumnowy , to wygodniejsze bo linie mogą się nie zmieścić
limit [nr] - ogranicza ilość wybranych danych
	select * from pracownicy limit 2;
	- losowo wybierze 2 wiersze ze wszystkich
sql_no_cache - definiujemy w zaptaniu że nie chcemy przechowywać wyniku w pamięci cache
	select sql_no_cache count(1) from pracownicy where zarobki >3000 and zarobki<5000;
	- chcemy jedno pole o wybranych właściwościach , i nie chcemy zapisać wyniku do pamięci cache
match() against() - porównaj do
	select id from tabelaZpolemOpisowym where match(opis) against('fragmet który szukam');
	- wyszukam fragmet tekstu w polu opis , i uzyskam id jego wiersza
order by - szereguj według
	select * from pracownicy order by nazwisko;
	- posegreguje alfabetycznie , domtślnie ASC -od początku
	select * from pracownicy order by nazwisko desc;
	- posegreguje od końca DESC
group by - grupuje  argumety (domyślnie od początku , od a-z) 
		ale do pożądkowania alfabetycznego ,albo po określonym polu (patrz firld())
		lepiej pisać 'order by' , zaś gropu by może być rowinięciem dla każdej
		z wcześniej wskazenej kolumny
	select nazwa , avg(zarobki) as srednia from pracownicy , dzialy where dzial=numer group by nazwa;
	- wybierze nazwe z tab.dzialy oraz średnią z tab.prac. jako "średnia" 
		i pogrupuje według danych z kolumny nazwa ,tworząc grupe dla każdej z nazw ,
		dzięki temu zobaczymy średnią policzoną dla każdego wiersza z kol.nazwa
	select nrZamowienia , sum(ilośćZamowionych) from zamowienia
	 group by nrZamowienia order by sum(ilośćZamowionych);
	- zapytanie zrealizujemy według grupowania po kol. nrZamowienia ,czyli każdy wiersz będzie
		reprezentowany , i posortujemy od najmniejszej sumy z pola ilośćZamowionych.
distinct - niepowtarzalne
	select distinct imie from pracownicy;
	- imiona nie będą się powtarzać
	SELECT DISTINCT t1.a FROM t1,t2 where t1.a=t2.a;
	- inne niż
is , is not - jest , lub nie jest
	select * from pracownicy where nazwisko is not null;
	- zobaczymy wszystkie gdzie na pewno pole w kol.nazwisko jest pełne
is not discint from - nie wiem jak tego urzyć , nie jest wyjątkiem od
	- jest równe wartości lub oba są zerami
'tytuł' - literał ,tak można dodać elegancki tytuł do naszego wyniku
	select 'total:' ,sum(zarobki) from pracownicy;
	- pokarze się dodatkowa kolumna zatytyłowana total
join - inner , right ,left - łączy tablice , słowo 'inner' jest opcjonalne , można je pominąć
	select zamowienia.nrZamowienia , kienci.imie , produkty.nazwa
	from zamowienia 
	inner join produkty
	on zamowienia.produktId = produkty.id
	inner join klienci 
	on zamowienia.kientId = klienci.id
	order by zamowienia.nrZamowienia ;
	- łączymy trzy tabele zamowienia , klienci , produkty
	- do tab. zamowienia dołączamy produkty na kolumnie produktId
		połączonej foreign key-em  z id w tab. klienci 
	- to samo dla tabeli klienci połączonej na kol. foreign key kientId i id
	- grupujemy po numerze zamówienia
	select r.klienciImie l.produktNr l.produktData
	from produkty l
	right join klienci r
	on l.nrKlienta = r.nrKlienta
	order by r.klienciImie ;
	- łącząc w prawo wybierzemy wszystkich klientów nie zależnie od tego czy
		zamówieli produkt czy nie
	- łączenie w lewo dało by pryjorytet polom z tab.produkty i zobaczylibyśmy
		tylko tych klientów którzy zamówili produkt
	select a.imie b.nazwa from pracownicy a inner join dzialy b on (a.dzial = b.nazwa);
	- zakładając że istnieje foreign key na kol. zazwa i dzial , można zrobić jojn 
	(nałożyć na siebie dwie tabele w miejscju tego klucza)
	select * from kienci , produkty where klienci.nrKlienta = produkty.nrKlienta;
	- tzw. naturalny JOIN , tablele połączą się tam tylko gdzie pola nrKlienta są zgodne
"loopback" powiązywanie tabeli smej ze sobą , inny rodzaj naturalnego JOIN-a
	select a.imie as imieSzefa , b.imie  from pracownicy a ,pracownicy b where a.szef=b.imie;
	- po klauzuli from określiliśmy że mamy tabele pracownicy A i B , dzięki temu można
	wybrać dwa razy tę samą kolumne z jednej tabeli , dla czytelności a.imie dosatło alias
	'imieSzefa' , Prawde mówiąc to wynik tego zaptania jest dziwny ale generalnie chodzi o 
	samą zasade tworzenia "loopback-a"

# ALTER
-------
add - 	alter table pracownicy add dyzur int;
	- doda nową kolumne 'dyzur' typu int na końcu tab. pracownicy.
after -	alter table pracownicy add dyzur int after nazwisko;
	- dodamy nową kolumnie 'dyzur' typu int do tab.pracywnicy ,po kolunie nazwisko.
change , modify - jedno z dwóch zależnie od bazy danych
	alter table pracownicy change zarobki ZAROBKI varchar(50);
	- zmienimy tytuł zarobki na ZAROBKI , trzeba podać typ zmiennej nowej kolumny
	alter table pracownicy modify zarobki int(11); 
	- zmienimy tylko typ zmiennych dla koluny zarobki na int
drop column - usówanie kolumny
	alter table pracownicy drop column zarobki;
	- usuniemy kolumne zarobki
	
# SOURCE
--------
	source ~/plik.sql
		- zaimportuje plik.sql


# UPDATE
--------
	update pracownicy set dzial=3 where id=1;
	- w tab. prac.. zmienimy wartość pola dzil na 3 , tam gdzie id=1

# DELETE
--------
	delete from pracownicy where id=1;
	- usuniemy z tab. prac.. wiersz gdzie id=1

# DROP
------
	drop index poZarobkach on pracownicy;
	- permanetnie usuniemy index poZarobkach razem z jego struktórą

# ZAPISYWANIE i CZYTANIE Z PLIKU
--------------------------------
	select * from pracownicy 
	into outfile 'ścierzka_do_pliku.txt'
	fields enclosed  by '"' 
	terminated by ','
	escaped by '\\'
	lines terminated by '\r\n\';
	- zapis do pliku , co zapiszemy (select) , gdzie , zamknięcie pól w " ,
		rodzielenie pól , znak ucieczki przed pustym polem NULL 
		zawijanie końca lini \r -powrót karetki \n-new line
	load data
	infile 'ścierzka_do_pliku.txt'
	into table nauka.pracownicy
	fields enclosed  by '"' 
	terminated by ','
	escaped by '\\'
	lines terminated by '\r\n\';
	- odczyt z pliku , trzeba wiedzieć jak został zapisany, zamknięcia pola
		rozdzielone pola , znaki ucieczki przy polach NULL , znać jak zawinięte
		zosrały linie

# MYSQLDUMP
-----------
	mysqldump --all-databases > dump.sql
	- zrobimy dumpa wszystkich baz , do pliku
	mysqldump --databases nauka > dump.sql
	- tylko baza nauka

# ZMIENNE
---------
LAST_INSERT_ID will return the last value assigned by Auto_increment 
	and it is not required to specify the table name.
	set @nazwaZmiennej := wartość
	- podmieniając jaką warość w kilku różnych tabelach moge pisać zmienna 
		zamiast za każdym razem powielać dane które niechcący moge przeinaczyć

# TRANZAKCJA
------------
transaction - zapewnia bezpieczeństo wykonywanych wielu zapytań
	start transaction;
	update...
	update...
	delete...
	commit;
	- startujemy tranzakcje , piszemy nasze zapytania , kończymy commitem.
		jeżeli jakieś zapytanie się nie powiedzie to żadne nie zostanie zrealizowne
sql_safe_update - jeżeli baza jest domyślnie w trybie safe update to można ją wyłączyć i włączyć
	przy tranzakcjach jeśli mamy problem
	set sql_safe_update = 0 ;
	- wyączamy
	set sql_safe_update = 1 ;
	- włączmy , wł,wył robimy przed i po tranzakcji

# F.ARYTMETYCZNE
----------------
	update produkty
	set cena = cena * 1.10
	where nrProduktu > "";
	- podnosimy cene o 1 i 0,10 czyli 10 % , dla fszystkich produktów
		gdzie nrProduktu jest większe niż "nic" , gdyby typ zmiennej
		był liczbą można by napisać 0
# URZYTOKOWNICY
--------------
show grant ;
	- pokaże moje uprwanienia
show grant for TYUrzytkownik@localhost ;
	- pokaże uprawnienia dla wybranego usera
create user JaUrzytkownik identified by 'haslo1234';
	- tworzy urzytkownika
grant all on nauka.* to JaUrzytkownik ;
	- wszystkie pozwolenia ale tylko w bazie nauka , za to w każdej jej tabeli
grant select , insert , update on nauka.* to TYUrzytkownik;
	- tylko select ,insert, update dla bazy nauka i wszystkich jego tabel
revoke select , insert , from nauka.* to TYUrzytkownik;
	- zabieramu urzytkownikowi możliwość update
rename user JaUrzytkownik to bob;
	- zmieniamy nazwe usera na bob
set password = password('nowe_hasło');
	- tak zmieniam dla siebie
set password for JaUrzytkownik password('nowe_hasło');
	-a tak dla wybranrgo usera
drop user JaUrzytkownik; 
	- usówanie usera
execute - pozwolenie do uruchamiania skryptow sql

# ZAPYTNIA ZAGNIEŻDŹONE
----------------------
	select * from pracownicy where zarobki>=(select avg(zarobki) from pracownicy);
	- wybieramy większe lub równe od średniej , bezpośrednie porównanie nie zadziała
	bo avg() jest funkcją grupującą , dlatego trzba porównać do wyniku zapytania
	poprzez zagnieżdżenie zapytania select

# TYPY ZMIENNYCH
---------------
	char - niezapełnione wypełnia string spacjami . w ustwieniach jest opcja do wyświetlania
		lub nie wyświetlania tych spacji . -ośmiobitowa wartość to max 255 characterów
	int
	varchar(x) - max 65535 bit ,ale niektóre charactry np;znaki chińskie mogą zajmować
		3 bity sztuka co zmiejsza nam warość jaką możemy zapisać w varrchar
	datetime -  m;y;d g;m;s ,8bajt
	char_lendth - długość liczona w znakach
	lendth - długość liczona w bajtach , zazwyczaj 1 ale dla niekórych znaków unicode więcej
	enum - is a string object used to specify set of predefined values and that can be used during table creation.
		Create table size(name ENUM('Small', 'Medium','Large');
	blob - binary large object , tintblob , blob , mediumblob ,longblob
		- blob jest case-sensitiv , w przeciwieństwie do text
	date - sama data
	decimal - całkowite z przecinkiem ,decimal (5,2) czyli 999.99 -pięć liczb i 2 po przecinkuj
	timestamp - ma wartość 0 przy teorzeniu nowej tabeli
		UPDATE CURRENT_TIMESTAMP modifier updates the timestamp field to  current 
		time whenever there is a change in other fields of the table
	curent_date - r,m,d
	tinytext - 255 bit
	text - 65535 bit
	mediumtext - 16 Milion bit
	longtext - 4 Bilion bit
	float - 4 bit , przechowuje duże liczby w notacji naukowej , ma ogrniczoną precyzje od ok 7 miejsc
	duble - 8 bit , jak float ale z precyzją do ok 15 miejsc
	now - r.m.d.g.m.s.

# funkcje
---------
	DATEDIFF(A, B) – Determines the difference between two dates and it is commonly used to calculate age
	now() - r.m.d.g.m.s.

# MYISAM
--------
	isam - Indexed Sequential Access Method
	Each MyISAM table is stored on disk in three formats:

	The ‘.frm’ file stores the table definition
	The data file has a ‘.MYD’ (MYData) extension
	The index file has a ‘.MYI’ (MYIndex) extension

# PRZYKŁADOWE TABLICE :
---------------------
MariaDB [nauka]> select * from dni;
+----+--------------+
| id | nazwa        |
+----+--------------+
|  1 | sroda        |
|  2 | czwartek     |
|  3 | poniedzialek |
|  4 | sobota       |
|  5 | wtorek       |
|  6 | niedziela    |
|  7 | piatek       |
+----+--------------+

MariaDB [nauka]> select * from pracownicy;
+----+------+---------+----------+-------+---------+
| id | szef | imie    | nazwisko | dzial | zarobki |
+----+------+---------+----------+-------+---------+
|  1 |    0 | jan     | nowak    |     1 |    2700 |
|  2 |    1 | marian  | bobek    |     2 |    3000 |
|  3 |    2 | staszek | koles    |     1 |    6000 |
+----+------+---------+----------+-------+---------+

MariaDB [nauka]> select * from dzialy;                                                                                        
+-------+-----------+
| numer | nazwa     |
+-------+-----------+
|     1 | produkcja |
|     2 | marketing |
+-------+-----------+

