#/bin/bash!
# Logfind - skrypt do wyszukiwania logów
# wersja 2.0 - wszystkie logi!

# źródła logów:
# DCOS PRIMARY:
ldp=/mnt/dcos.aws

# DCOS PRIMARY ARCHIWUM:
ldpa=/mnt/logs/dcos

# DCOS SECONDARY
lds=/mnt/dcos.secondary

# DCOS SECONDARY ARCHIWUM:
ldsa=/mnt/logs/dcos.secondary

# NONDCOS:
lnd=/mnt/aws

# NONDCOS ARCHIWUM:
lnda=/mnt/logs

# NETSCALER:
lnet=/mnt/logs/current_NS_logs

# NETSCALER ARCHIWUM:
lneta=/mnt/logs/netscalerlogs

# TEST
ltst=/mnt/dcos.staging

# Ścieżka do pliku aliasów
AL=~/.logfind.alias

# Ustawienia domyślne:
PLAT="dcos"
LDATE="dzis"
SIZE=0

# definicja funkcji pomocy
function helper
 {
  echo "Logfind v 2.1.7 (ostatnia modyfikacja: 2018-07-12)"
  echo "Uwagi, propozycje: sebastian.kasperek@digitalvirgo.pl lub komunikator @skasperek"
  echo -e "Dokumentacja: https://wikis.services.avantis.pl/display/TPP/Logfind\n"
  echo "Użycie logfinda:"
  echo -e "logfind -<opcja> [parametr]\n"
  echo -e "\t-n [nazwa / fragment nazwy] (wymagane zamiennie z -a)"
  echo -e "\t nazwa lub fragment nazwy wyszukiwanego logu, opcja wymagana jeśli nie zostanie użyte -a, wielkość znaków nie ma znaczenia\n"
  echo -e "\t-a [alias] (wymagane zamiennie z -n)"
  echo -e "\t aliasy to skróty skojarzone z konkretnymi nazwami lub fragmentami logów, definiowane w ukrytym pliku $AL\n"
  echo -e "\t-p [primary / secondary / dcos / nondcos / all / test / netscaler] [p / s / d / n / a / t / e] (opcjonalne)"
  echo -e "\t wskazanie platformy na której będzie wyszukiwany log (all - wszystkie platformy, poza testową i netscaler), domyślnie dcos, czyli primary dcos + secondary dcos\n"
  echo -e "\t-d [YYYY-MM-DD] / [0-99] (opcjonalne)"
  echo -e "\t data dla której ma być wyszukiwany log archiwalny, domyślnie dzień bieżący (log niezarchiwizowany) lub ilość dni wstecz z przedziału 0*-99"
  echo -e "\t * -d 0 lub -d <bieżąca data> stososować w przypadku logów, które rotują w trakcie dnia, np MTSP, wówczas log z wcześniejszych godzin jest już w archiwum z datą bieżącą\n"
  echo -e "\t-l"
  echo -e "\t wyświetla zdefiniowane w pliku $AL aliasy\n"
  echo -e "\t-h"
  echo -e "\t wyświetlenie powyższej pomocy\n"
  echo -e "\t -y"
  echo -e "\t wyświetlenie rozmiaru pliku z logami (human readable)\n"
  echo -e "Kolejność opcji nie ma znaczenia.\n"
  echo -e "Aliasy"
  echo -e "zmodyfikuj lub utwórz plik $AL i umieść w nim aliasy (alias; nazwa lub fragment nazwy loga) - każdy w nowej linii, np:\n"
  echo -e "mtsp;\t\tmt-service-proxy.log"
  echo -e "dpw;\t\tdirectpay-web"
  echo -e "bplus;\t\tplus-sms-[0-9]*\n"
  echo -e "- alias, od zdefiniowanego logu lub jego fragmentu, musi oddzielać ; (średnik), białe znaki w aliasie lub definicji są niedozwolone"
  echo -e "- tak przygotowane aliasy można wykorzystać z opcją -a zamiast -n, przyspiesza to wyszukiwanie najpopularniejszych logów"
  echo -e "- dopuszczalne jest stosowanie komentarzy rozpoczynających się znakiem #, takie wpisy będą ignorowane przy pobieraniu aliasu"
  echo -e "- ponieważ plik definiujący aliasy znajduje się w katalogu domowym, każdy użytkownik może zdefiniować własne aliasy\n"
  echo -e "Przykłady użycia:\n"
  echo -e "\tlogfind -n brazil"
  echo -e "\twyszuka wszystkie logi zawierające słowo \"brazil\" na platformie dcos (primary i secondary) z dnia bieżącego\n"
  echo -e "\tlogfind -p primary -n directpay"
  echo -e "\tlogfind -pp -n directpay (krótsza wersja zapisu)"
  echo -e "\twyszuka wszystkie logi zawierające słowo \"directpay\" na platformie dcos primary z dnia bieżącego\n"
  echo -e "\tlogfind -p nondcos -n mt-service-proxy -d 2017-09-01"
  echo -e "\tlogfind -pn -n mt-service-proxy -d 2017-09-01 (krótsza wersja zapisu)"
  echo -e "\twyszuka wszystkie logi zawierające słowo \"mt-service-proxy\" na platformie nondcos (klasyczne hosty aplikacyjne, tomcaty, etc.) z dnia 2017-09-01\n"
  echo -e "\tlogfind -p nondcos -a mtsp"
  echo -e "\tlogfind -pn -a mtsp (krótsza wersja zapisu)"
  echo -e "\twyszuka wszystkie logi o nazwie mt-service-proxy.log (o ile alias został zdefiniowany) na platformie nondcos\n"
  echo -e "\tlogfind -p netscaler -n papla -d 1"
  echo -e "\tlogfind -pe -n papla -d1 (krótsza wersja zapisu)"
  echo -e "\twyszuka wszystkie logi zawierające słowo \"papla\" na platformie netscaler z dnia poprzedniego\n"
  echo -e "\tlogfind -p all -n plus"
  echo -e "\tlogfind -pa -n plus (krótsza wersja zapisu)"
  echo -e "\twyszuka wszystkie logi zawierające słowo \"plus\" na wszystkich platformach z dnia bieżącego (polecane tylko dla desperatów, którzy nie wiedzą gdzie co leży)\n"
  exit 0
 }
# definicja funkcji błędów
function error
 {
  code=$1

  local help="aby wyświetlić pomoc, wykonaj: logfind -h"

  case $code in
   "date")
     echo "błąd: nieprawidłowy format daty, wpisz datę w postaci: YYYY-MM-DD, np 2017-09-01 lub w przedziale 0-99 (tyle dni przed dniem dzisiejszym)"
     echo "$help"
     exit 1 ;;
   "alname")
     echo "błąd: nie możesz podawać nazwy i aliasu jednocześnie (-n i -a działają zamiennie)"
     echo "$help"
     exit 1 ;;
   "noalname")
     echo "błąd: musisz podać nazwę (-n) lub alias (-a)"
     echo "$help"
     exit 1 ;;
   "tstdate")
     echo "błąd: nie podawaj daty dla platformy test"
     echo "$help"
     exit 1 ;;
   "alfile")
     echo "błąd: plik $AL zawierający aliasy nie istnieje"
     echo "$help"
     exit 1 ;;
   "alias")
     echo "błąd: alias $ALIAS nie został znaleziony"
     echo "$help"
     exit 1 ;;
   "plat")
     echo "błąd: platforma $OPTARG nie istnieje"
     echo "$help"
     exit 1 ;;
   "arg")
     echo "błąd: opcja -$OPTARG wymaga argumentu"
     echo "$help"
     exit 1 ;;
   "option")
     echo "błąd: opcja -$OPTARG nie istnieje"
     echo "$help"
     exit 1 ;;
  esac
 }

# definicja funkcji wyszukujących logi
function finder
 {
# definicja funkcji wyszukującej na platformie DCOS
  function fdcos
   {
    dirs=$(ls -g $source | awk '{ print $NF }' | grep '^10.168')
     echo -e "\nLogi zawierajace wyrażenie \"$name\" na platformie DCOS $plat:"
     result=$(for i in ${dirs}
               do
                if [ $SIZE -eq 1 ]
                 then
          find $source/$i/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t" -exec du -bh {} \; 2>/dev/null | sort
         else
          find $source/$i/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t%p\n" 2>/dev/null | sort
        fi
               done)
     if [ -z "$result" ]
      then
       echo -e "*** nie znaleziono ***"
      else
       echo "$result" | sort
      fi
   }

# definicja funkcji wyszukującej na platformie NONDCOS
  function fnondcos
   {
    dirs=$(ls -g $source | awk '{ print $NF }' | grep -v '^10.168\|logmover\|netscalerlogs')
     echo -e "\nLogi zawierajace wyrażenie \"$name\" na platformie NONDCOS:"
     result=$(for i in ${dirs}
               do
                                if [ $SIZE -eq 1 ]
                                 then
                          find $source/$i/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t" -exec du -bh {} \; 2>/dev/null | sort
                                 else
                          find $source/$i/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t%p\n" 2>/dev/null | sort
                                fi
               done)
     if [ -z "$result" ]
      then
       echo -e "*** nie znaleziono ***"
      else
       echo "$result" | sort
      fi
   }
# definicja funkcji wyszukującej na platformie NETSCALER
# rozdzielone na 2 opcje, bo archiwum jest nietypowe, uwaga na to
  function fnetscaler
   {
    if [ $archive -eq 0 ]
     then
      dirs=$(ls -g $source | awk '{ print $NF }' | grep 'nsaws')
       echo -e "\nLogi zawierajace wyrażenie \"$name\" na platformie NETSCALER:"
        result=$(for i in ${dirs}
                  do
                                   if [ $SIZE -eq 1 ]
                            then
                     find $source/$i/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t" -exec du -bh {} \; 2>/dev/null | sort
                            else
                     find $source/$i/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t%p\n" 2>/dev/null | sort
                                   fi
                  done)
    else
      dirs=$source
       echo -e "\nLogi zawierajace wyrażenie \"$name\" na platformie NETSCALER:"
        result=$(for i in ${dirs}
                  do
                                   if [ $SIZE -eq 1 ]
                            then
                     find $source/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t" -exec du -bh {} \; 2>/dev/null | sort
                                else
                     find $source/$ldate -type f -iname "*$name*" -printf "%TY-%Tm-%Td %TH:%TM:%.2TS\t%p\n" 2>/dev/null | sort
                                   fi
                  done)
    fi

     if [ -z "$result" ]
      then
       echo -e "*** nie znaleziono ***"
      else
       echo "$result" | sort
      fi
   }

  local plat=$1
  local ldate=$2
  local name=$3

# wywołanie funkcji szukających na platformach DCOS

  if [ $plat = "primary" ] && [ $ldate = "dzis" ]
   then
    ldate=""
    local source=$ldp
    fdcos
  elif [ $plat = "secondary" ] && [ $ldate = "dzis" ]
   then
    ldate=""
    local source=$lds
    fdcos
  elif [ $plat = "dcos" ] && [ $ldate = "dzis" ]
   then
    ldate=""
    local source=$ldp
    plat="primary"
    fdcos
    local source=$lds
    plat="secondary"
    fdcos
  elif [ $plat = "primary" ] && [ $ldate != "dzis" ]
   then
    local source=$ldpa
    plat="primary"
    fdcos
  elif [ $plat = "secondary" ] && [ $ldate != "dzis" ]
   then
    local source=$ldsa
    plat="secondary"
    fdcos
  elif [ $plat = "dcos" ] && [ $ldate != "dzis" ]
   then
    local source=$ldpa
    plat="primary"
    fdcos
    local source=$ldsa
    plat="secondary"
    fdcos
  elif [ $plat = "test" ]
   then
    ldate=""
    local source=$ltst
    plat="test"
    fdcos
  fi
# wywołanie funkcji szukających na platformie NONDCOS
  if [ $plat = "nondcos" ] && [ $ldate = "dzis" ]
   then
    ldate=""
    local source=$lnd
    plat="nondcos"
    fnondcos
  elif [ $plat = "nondcos" ] && [ $ldate != "dzis" ]
   then
    local source=$lnda
    plat="nondcos"
    fnondcos
  fi

# wywołanie funkcji szukających na wszystkich platformach produkcyjnych
  if [ $plat = "all" ] && [ $ldate = "dzis" ]
   then
    ldate=""
    local source=$ldp
    plat="primary"
    fdcos
    local source=$lds
    plat="secondary"
    fdcos
    local source=$lnd
    fnondcos
  elif [ $plat = "all" ] && [ $ldate != "dzis" ]
   then
    local source=$ldpa
    plat="primary"
    fdcos
    local source=$ldsa
    plat="secondary"
    fdcos
    local source=$lnda
    fnondcos
  fi

# wywołanie funkcji szukających na wszystkich platformach netscaler
  if [ $plat = "netscaler" ] && [ $ldate = "dzis" ]
   then
    ldate=""
    local source=$lnet
    archive=0
    fnetscaler
  elif [ $plat = "netscaler" ] && [ $ldate != "dzis" ]
   then
    local source=$lneta
    archive=1
    fnetscaler
  fi
 }
# definicja opcji
while getopts ":p:d:n:a:lhy" opt
 do
  case $opt in
    p)
      if [[ $OPTARG  =~ ^[Pp]$ ]] || [ $OPTARG  = "primary" ]
       then
       PLAT="primary"
      elif [[ $OPTARG  =~ ^[Ss]$ ]] || [ $OPTARG  = "secondary" ]
       then
       PLAT="secondary"
      elif [[ $OPTARG  =~ ^[Dd]$ ]] || [ $OPTARG  = "dcos" ]
       then
       PLAT="dcos"
      elif [[ $OPTARG  =~ ^[Nn]$ ]] || [ $OPTARG  = "nondcos" ]
       then
       PLAT="nondcos"
      elif [[ $OPTARG  =~ ^[Ee]$ ]] || [ $OPTARG  = "netscaler" ]
       then
       PLAT="netscaler"
      elif [[ $OPTARG  =~ ^[Aa]$ ]] || [ $OPTARG  = "all" ]
       then
       PLAT="all"
      elif [[ $OPTARG  =~ ^[Tt]$ ]] || [ $OPTARG  = "test" ]
       then
       PLAT="test"
      else
       error plat
      fi ;;
    d)
      LDATE=$OPTARG ;;
    n)
      NAME=$OPTARG ;;
    a)
      ALIAS=$OPTARG ;;
    l)
      echo "Zdefiniowane aliasy:"
      cat "$AL"
      exit 0 ;;
    y)
      SIZE=1 ;;
    h)
      helper ;;
    \?)
      error option ;;
    :)
      error arg ;;
  esac
 done

# kontorola błędów
if [[ $LDATE =~ ^([0-9]|[1-9]{1}[0-9]{1})$ ]]
 then
  LDATE=`date -d "-$LDATE day" +%Y-%m-%d`
fi

if [ $LDATE != "dzis" ]
 then
  if [[ $LDATE =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]
   then
    derror=0
  elif [ $(echo "$LDATE" | wc -m) -ne 10 ]
   then
    error date
  fi
 date -d "$LDATE" +"%YYYY-%MM-%DD" >/dev/null 2>&1 && derror=0 || derror=1
  if [ $derror -ne 0 ]
   then
    error date
  fi
fi

if [ -z $NAME ] && [ -z $ALIAS ]
 then
 error noalname
elif [ -n "$NAME" ] && [ -n "$ALIAS" ]
 then
  error alname
elif [ $PLAT = "test" ] && [ $LDATE != "dzis" ]
 then
  error tstdate
elif [ -z $NAME ] && [ -n $ALIAS ]
 then
  if [ ! -f "$AL" ]
   then
    error alfile
  fi
  NAME=$(grep -iw "$ALIAS;" $AL | grep -v '#' | awk -F ';' '{ print $2 }' | tr -d "\t ")
  if [ -z $NAME ]
   then
    error alias
  fi
fi

# wywołanie głównej funkcji z parametrami
finder $PLAT $LDATE $NAME

